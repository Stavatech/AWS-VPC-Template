AWSTemplateFormatVersion: '2010-09-09'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: {{ cidr_block }}
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
    
  {% if has_private_route %}
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  {% endif %}

  {% if has_public_route %}
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  {% endif %}

  {% for subnet in subnets  %}
  {{ subnet['name'] }}:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - {{ subnet['az_index'] }}
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: {{ subnet['cidr_block'] }}
      MapPublicIpOnLaunch: {{ subnet['is_public'] }}
  
  {% if subnet['is_public'] %}
  {{ subnet['name'] }}RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref {{ subnet['name'] }}
      RouteTableId: !Ref PublicRouteTable
  {% else %}
  {{ subnet['name'] }}RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref {{ subnet['name'] }}
      RouteTableId: !Ref PrivateRouteTable  
  {% endif %}
  
  {% endfor %}